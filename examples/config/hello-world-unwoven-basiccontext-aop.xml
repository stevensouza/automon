<!--
The 'user_monitor' pointcut defines what code you would like to time.  The 'user_exceptions' pointcut defines what code
you would like to monitor for exceptions.  Because often these should be the same you can define another pointcut that
they both point to. In the example below that is done with the 'profile' pointcut.

Pointcuts can be combined with boolean logic like AND, ||, !.  See the AspectJ documentation for more information
on the rich pointcut language.

Note you can specify any openmon by putting this argument in the first column in this comment section: org.automon=sysout

See ajc-aop.xml for more information and examples.

Note these are not required but if they are put in this xml the are not comments but used to enable/disable tracing.
Simply turn to false if you want to disable. Note setting enable=false doesn't do anything except allow the pointcuts to
check to only match if it is enabled (see example below with enabled() AND...).  Logging can be enabled/disabled
indepedently of setting enable. The effect of this would be to write to the MDC/NDC but not log it. However if the program
does any other log statements the MDC/NDC info would be logged in them.

com.myorganization.MyTracingBasicContextAspect.enable=true
com.myorganization.MyTracingBasicContextAspect.enableLogging=true


-->
<aspectj>
  <aspects>
      <!-- note both annotation style (spring) and native style aspects will work. They are named the same but in
      different packages (*aspectj.* or *.spring.*). Both are below and one is commented out
      -->

      <!--<concrete-aspect name="com.myorganization.MyTracingBasicContextAspect" extends="org.automon.tracing.spring.BasicContextTracingAspect">-->
      <concrete-aspect name="com.myorganization.MyTracingBasicContextAspect" extends="org.automon.tracing.aspectj.BasicContextTracingAspect">
      <pointcut name="select"  expression="enabled() AND execution(* com.stevesouza.helloworld.HelloWorld.*(..))"/>
     </concrete-aspect>
  </aspects>
    <!--
      The following lets you more clearly see what the weaver is doing.  You can use dump to write the woven
     classes to disk.  This can be useful to view the woven classes in a decompiler tool like JD-GUI.
     -->
    <weaver options="-verbose -debug">
        <!-- only weave classes within com.stevesouza and its subpackages. Note required per pointcut above but an optimization. -->
        <include within="com.stevesouza..*"/>
        <!--<dump within="org.automon.implementations.*"/>-->
        <!--<dump within="org.automon.helloworld.*"/>-->
        <!-- Weave types that are within the javax.* or org.aspectj.*
           packages. Also weave all types in the foo package that do
           not have the @NoWeave annotation. -->
        <!--<include within="javax.*"/>-->
        <!--<include within="org.aspectj.*"/>-->
        <!--<include within="(!@NoWeave foo.*) AND foo.*"/>-->

        <!-- Do not weave types within the "bar" pakage -->
        <!--<exclude within="bar.*"/>-->
    </weaver>
</aspectj>


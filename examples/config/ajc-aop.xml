<!--

The 'user_monitor' pointcut defines what code you would like to time.  The 'user_exceptions' pointcut defines what code
you would like to monitor for exceptions.  Because often these should be the same you can define another pointcut that
they both point to. In the example below that is done with the 'profile' pointcut.

Pointcuts can be combined with boolean logic like AND, ||, ! (due to xml limitations AND should be used instead of &&.
||, OR may both be used.  I believe AND, OR are case sensitive. Refer to aspectJ documentation for more information)

See the AspectJ documentation for more information
on the rich pointcut language.  This file also has various pointcuts that may be useful.  For example the 'ejb' pointcut
is defined which will monitor any code that has any of the JDKs ejb annotations (Stateless, Stateful etc).


If 'org.automon' is not specified anywhere the current implementations (for example jamon, javasimon, yammer metrics) will be
attempted to be created.  The first one that succeeds will be used (for example by putting the jamon jar in the classpath
it could be created).  If none is created Automon is disabled.

Note you can also explicitly specify an OpenMon implementation.  Note if the following line is put in the first column of the
comments section of this file then it will be used to configure the Automon monitoring implementation: org.automon=sysout
You can also specify your own OpenMon implementation as long as it has a fully qualified classname (i.e. com.mypackage.MyClass) and
a noarg constructor.  It can also be specified by the command line parameter: -Dorg.automon=sysout

Current choices include the following though you can provide your own implementation of org.automon.implementations.OpenMon:  jamon, metrics, javasimon, nullimp, sysout

Here are a few pointcut examples. Note I think AND/OR must be in uppercase.

<pointcut name="profile" expression="(hismethods() OR hermethods()) AND myannotations() AND !boringstuff()"/>

 Any calls to getFirstName in any class:
  <pointcut name="profile" expression="execution(* *.getFirstName(..))"/>

 Any method in any class that has the format get*Name:
  <pointcut name="profile" expression="execution(* *.get*Name(..))"/>

 Note the path to the class must contain the full package name and/or wildcards (.., *):
  <pointcut name="profile" expression="execution(* com.stevesouza.helloworld.HelloWorld.*(..))"/>

 all methods in the following package structure (recursively).  This includes static methods:
  <pointcut name="profile" expression="execution(* com.stevesouza..*(..))"/>

public methods only:
  <pointcut name="profile" expression="execution(public * com.stevesouza.helloworld.HelloWorld.*(..))"/>

within a package as well as any subpackages:
        <pointcut name="profile" expression="within(com.stevesouza.helloworld..*)"/>

within a type as well as any types that inherit from it.:
        <pointcut name="profile" expression="within(com.stevesouza.helloworld.HelloWorld+)"/>

-->
<aspectj>
  <aspects>
      <!--  If you want to use more than just method pointcuts use AspectJBase -->
      <!--<concrete-aspect name="com.myorganization.MyMonitoringAspect" extends="org.automon.aspects.AspectJBase">-->
     <concrete-aspect name="com.myorganization.MyMonitoringAspect" extends="org.automon.aspects.SpringBase">
        <pointcut name="user_monitor"       expression="profile()"/>
        <pointcut name="user_exceptions"    expression="profile()"/>
        <pointcut name="profile"            expression="automon_annotations()"/>


         <!-- The following are reusable pointcuts you can use to tell Automon what parts of your application to monitor -->

        <!-- annotation pointcuts -->
        <pointcut name="jamon_annotations" expression="org.automon.pointcuts.Annotations.jamon()"/>
        <pointcut name="automon_annotations" expression="org.automon.pointcuts.Annotations.automon()"/>
        <pointcut name="javasimon_annotations" expression="org.automon.pointcuts.Annotations.javasimon()"/>
        <pointcut name="metrics_annotations" expression="org.automon.pointcuts.Annotations.metrics()"/>
        <pointcut name="newrelic_annotations" expression="org.automon.pointcuts.Annotations.newrelic()"/>
        <pointcut name="spring_annotations" expression="org.automon.pointcuts.Annotations.spring()"/>
        <pointcut name="jaxrs_annotations" expression="org.automon.pointcuts.Annotations.jaxrs()"/>
        <pointcut name="jpa_annotations" expression="org.automon.pointcuts.Annotations.jpa()"/>
        
        <!-- jdk pointcuts: -->
        <pointcut name="jdbc" expression="org.automon.pointcuts.Jdk.jdbc()"/>
        <pointcut name="io" expression="org.automon.pointcuts.Jdk.io()"/>
        <pointcut name="net" expression="org.automon.pointcuts.Jdk.net()"/>

        <!-- **** pointcuts valid for Spring applications (Spring only supports 'execution(..)' pointcuts.
             Note Select could also be used instead of SpringSelect as Spring inherits from SpringSelect
         -->
        <pointcut name="objectMethod" expression="org.automon.pointcuts.SpringSelect.objectMethod()"/>
        <pointcut name="method" expression="org.automon.pointcuts.SpringSelect.method()"/>

        <!-- method execution pointcuts -->
        <pointcut name="publicMethod" expression="org.automon.pointcuts.SpringSelect.publicMethod()"/>
        <pointcut name="protectedMethod" expression="org.automon.pointcuts.SpringSelect.protectedMethod()"/>
        <pointcut name="privateMethod" expression="org.automon.pointcuts.SpringSelect.privateMethod()"/>
        <pointcut name="packageMethod" expression="org.automon.pointcuts.SpringSelect.packageMethod()"/>

        <!-- method getter/setter pointcuts -->
        <pointcut name="setter" expression="org.automon.pointcuts.SpringSelect.setter()"/>
        <pointcut name="getter" expression="org.automon.pointcuts.SpringSelect.getter()"/>
        <pointcut name="getterOrSetter" expression="org.automon.pointcuts.SpringSelect.getterOrSetter()"/>

         <!-- **** pointcuts valid for AspectJ and not Spring applications (Spring only supports 'execution(..)' pointcuts.-->
         <pointcut name="all" expression="org.automon.pointcuts.Select.all()"/>

         <!-- constructor pointcuts i.e. new MyObject() -->
         <pointcut name="constructor" expression="org.automon.pointcuts.Select.constructor()"/>
         <pointcut name="publicConstructor" expression="org.automon.pointcuts.Select.publicConstructor()"/>
         <pointcut name="protectedConstructor" expression="org.automon.pointcuts.Select.protectedConstructor()"/>
         <pointcut name="privateConstructor" expression="org.automon.pointcuts.Select.privateConstructor()"/>
         <pointcut name="packageConstructor" expression="org.automon.pointcuts.Select.packageConstructor()"/>

         <!-- field set pointcuts i.e. myObject1 = myObject2; -->
         <pointcut name="fieldSet" expression="org.automon.pointcuts.Select.fieldSet()"/>
         <pointcut name="publicFieldSet" expression="org.automon.pointcuts.Select.publicFieldSet()"/>
         <pointcut name="protectedFieldSet" expression="org.automon.pointcuts.Select.protectedFieldSet()"/>
         <pointcut name="privateFieldSet" expression="org.automon.pointcuts.Select.privateFieldSet()"/>
         <pointcut name="packageFieldSet" expression="org.automon.pointcuts.Select.packageFieldSet()"/>

         <!-- field get pointcuts i.e. System.out.println(myObject2.myVar); -->
         <pointcut name="fieldGet" expression="org.automon.pointcuts.Select.fieldGet()"/>
         <pointcut name="publicFieldGet" expression="org.automon.pointcuts.Select.publicFieldGet()"/>
         <pointcut name="protectedFieldGet" expression="org.automon.pointcuts.Select.protectedFieldGet()"/>
         <pointcut name="privateFieldGet" expression="org.automon.pointcuts.Select.privateFieldGet()"/>
         <pointcut name="packageFieldGet" expression="org.automon.pointcuts.Select.packageFieldGet()"/>

         <!-- 3rd party jars -->
         <pointcut name="hbase" expression="org.automon.pointcuts.Libraries.hbase()"/>
         <pointcut name="automon" expression="org.automon.pointcuts.SpringSelect.automon()"/>

     </concrete-aspect>
  </aspects>
    <!--
     The following lets you more clearly see what the weaver is doing.  You can use dump to write the woven
     classes to disk.  This can be useful to view the woven classes in a decompiler tool like JD-GUI.

     Weave types that are within the javax.* or org.aspectj.*
       packages. Also weave all types in the foo package that do
       not have the @NoWeave annotation.

     Do not weave types within the "bar" pakage
    -->
    <!--
    <weaver options="-verbose -debug">
        <dump within="org.automon.implementations.*"/>
        <dump within="org.automon.helloworld.*"/>

        <include within="javax.*"/>
        <include within="org.aspectj.*"/>
        <include within="(!@NoWeave foo.*) AND foo.*"/>

       <exclude within="bar.*"/>
    </weaver>
    -->
</aspectj>


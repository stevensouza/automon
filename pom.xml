<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>9</version>
    </parent>

    <groupId>org.automon</groupId>
    <artifactId>automon_parent</artifactId>
    <version>1.0.4-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>automon parent</name>

    <description>Automon combines the power of AOP (AspectJ) with any monitoring or logging tools you already use to
        declaratively monitor your Java code, the JDK, and dependent libraries.
    </description>
    <url>http://www.automon.org</url>

    <licenses>
        <license>
            <name>Automon License (Apache 2.0)</name>
            <url>https://github.com/stevensouza/automon/blob/master/LICENSE</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <url>https://github.com/stevensouza/automon</url>
        <connection>scm:git:git://github.com:stevensouza/automon.git</connection>
        <developerConnection>scm:git:git@github.com:stevensouza/automon.git</developerConnection>
    </scm>

    <developers>
        <developer>
            <id>stevensouza</id>
            <name>Steve Souza</name>
            <email>steve@stevesouza.com</email>
        </developer>
    </developers>

    <modules>
        <module>automon</module>
        <module>helloworld_unwoven</module>
        <module>helloworld_woven</module>
        <module>spring_woven</module>
        <module>helloworld_unwoven_jamon</module>
        <module>unwoven_jdk</module>
        <module>webapp_unwoven</module>
        <module>spring_aop</module>
    </modules>

    <properties>
        <automon.version>1.0.4-SNAPSHOT</automon.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <jdk.version>1.8</jdk.version>
        <maven.compiler.source>${jdk.version}</maven.compiler.source>
        <maven.compiler.target>${jdk.version}</maven.compiler.target>
        <maven.javadoc.plugin.version>3.8.0</maven.javadoc.plugin.version>
        <maven.source.plugin.version>3.3.1</maven.source.plugin.version>
        <maven.compiler.plugin.version>3.10.1</maven.compiler.plugin.version>
        <surefire.version>3.3.1</surefire.version>

        <metrics.version>4.2.26</metrics.version>
        <jamonapi.version>2.82</jamonapi.version>
        <javasimon.version>4.2.0</javasimon.version>
        <assertj.version>3.26.3</assertj.version>
        <!--        fix-->
        <aspectj.version>1.9.3</aspectj.version>
        <!--        fix-->
        <mojo.ajc.version>1.7</mojo.ajc.version>
        <!--        fix-->
        <mojo.execution.version>3.3.0</mojo.execution.version>
        <!--        fix this is the last version that supports jdk 1.8. go to 5.12.0 if i can get to compile with a higher version-->
        <mockito.version>4.11.0</mockito.version>
        <!--        fix - junit 5 supports only higher jdk's-->
        <junit.version>4.13.2</junit.version>
        <!--        fix - remove - no longer released-->
        <perf4j.version>0.9.16</perf4j.version>
        <newrelic.version>8.13.0</newrelic.version>
        <!--        latest is 4.0.1 but should i support? also they changed the maven repo for it -->
        <ejb.version>3.2.2</ejb.version>
        <!--        6.1.10 needs java 17-->
        <spring.version>5.3.37</spring.version>
        <spring.aop.version>1.9.3</spring.aop.version>
        <!--        moved.  do i need to support?-->
        <jaxrs.version>2.1.1</jaxrs.version>
        <jpa.version>1.0.1.Final</jpa.version>
        <!--        obsolete remove support -->
        <statsd.version>3.1.0</statsd.version>
        <micrometer.version>1.13.2</micrometer.version>

        <!-- Add more properties for other plugin and dependency versions -->
        <aspectj-maven-plugin.version>1.14</aspectj-maven-plugin.version>
        <!-- fix to newer version -->
        <maven-shade-plugin.version>3.2.4</maven-shade-plugin.version>
    </properties>

    <build>
        <pluginManagement>

            <plugins>

                <!-- plugin used to compile aspectj using maven https://github.com/dev-aspectj/aspectj-maven-plugin?tab=readme-ov-file -->
                <plugin>
                    <groupId>dev.aspectj</groupId>
                    <artifactId>aspectj-maven-plugin</artifactId>
                    <version>${aspectj-maven-plugin.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.aspectj</groupId>
                            <artifactId>aspectjtools</artifactId>
                            <!-- AspectJ compiler version, in sync with runtime -->
                            <version>${aspectj.version}</version>
                        </dependency>
                    </dependencies>

                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                        <complianceLevel>${jdk.version}</complianceLevel>
                        <!-- generates META-INF/aop-ajc.xml file and puts it in jar.  Recommended for aspectj libraries. -->
                        <outxml>true</outxml>
                        <showWeaveInfo>true</showWeaveInfo>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>compile</goal>       <!-- use this goal to weave constructor your main classes -->
                                <goal>test-compile</goal> <!-- use this goal to weave constructor your test classes -->
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven.javadoc.plugin.version}</version>
                    <!-- The following is needed for jdk 1.8 javadocs generation or failure. -->
                    <!--                <configuration>-->
                    <!--                    <additionalparam>-Xdoclint:none</additionalparam>-->
                    <!--                </configuration>-->
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven.source.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--                Define the class to run and any arguments in child poms.-->
                <!--                - mvn exec:java (compiles and runs if executed from child dir)-->
                <!--                - mvn exec:java -Dexec.args="arg1 arg2 arg3" (provide different args)-->
                <!--                - mvn exec:java -Dexec.mainClass="com.example.YourMainClass" (provide different class)-->

                <!--                Configure in child class like the following-->
                <!--                <plugin>-->
                <!--                    &lt;!&ndash;            to run the specified class: mvn exec:exec&ndash;&gt;-->
                <!--                    <groupId>org.codehaus.mojo</groupId>-->
                <!--                    <artifactId>exec-maven-plugin</artifactId>-->
                <!--                    <configuration>-->
                <!--                        <mainClass>com.stevesouza.helloworld.HelloWorld</mainClass>-->
                <!--                        <arguments>-->
                <!--                            <argument>5</argument>-->
                <!--                        </arguments>-->
                <!--                    </configuration>-->
                <!--                </plugin>-->


                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${mojo.execution.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- generates class path with constructor dependencies as well as generated class -->
                        <classpathScope>runtime</classpathScope>
                    </configuration>
                </plugin>

                <!-- The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${surefire.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                    </configuration>
                </plugin>

                <plugin>
                    <!-- The maven shade plugin bundles all jars into one big jar (uber jar) making deployment and execution easier.
                     The mainClass element is defined so you can execute the jar without specifying the class.  To run this jar
                     simply type: java -Dorg.automon="sysout" -jar target/spring_aop-1.0.2-SNAPSHOT.jar
                     or more generally  java -jar myuber.jar arg1,arg2
                    -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven-shade-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <createDependencyReducedPom>false</createDependencyReducedPom>
                                <shadedArtifactAttached>true</shadedArtifactAttached>
                                <shadedClassifierName>shaded</shadedClassifierName>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


    <distributionManagement>
        <snapshotRepository>
            <id>sonatype-nexus-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>sonatype-nexus-staging</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

    <profiles>
        <!--
             Profile for releases to sign artifacts
        -->
        <profile>
            <id>release</id>
            <build>
                <plugins>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>


            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${spring.aop.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- runtime dependencies -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjrt</artifactId>
                <version>${aspectj.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- test dependencies -->
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>com.jamonapi</groupId>
                <artifactId>jamon</artifactId>
                <version>${jamonapi.version}</version>
<!--                <scope>provided</scope>-->
            </dependency>

            <dependency>
                <groupId>org.javasimon</groupId>
                <artifactId>javasimon-core</artifactId>
                <version>${javasimon.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-core</artifactId>
                <version>${metrics.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-annotation</artifactId>
                <version>${metrics.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-core</artifactId>
                <version>${micrometer.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.perf4j</groupId>
                <artifactId>perf4j</artifactId>
                <version>${perf4j.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>com.newrelic.agent.java</groupId>
                <artifactId>newrelic-api</artifactId>
                <version>${newrelic.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>com.timgroup</groupId>
                <artifactId>java-statsd-client</artifactId>
                <version>${statsd.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>javax.ejb</groupId>
                <artifactId>javax.ejb-api</artifactId>
                <version>${ejb.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.ws.rs</groupId>
                <artifactId>javax.ws.rs-api</artifactId>
                <version>${jaxrs.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.hibernate.javax.persistence</groupId>
                <artifactId>hibernate-jpa-2.0-api</artifactId>
                <version>${jpa.version}</version>
                <scope>provided</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

</project>

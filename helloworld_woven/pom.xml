<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.automon</groupId>
        <artifactId>automon_parent</artifactId>
        <version>1.0.4-SNAPSHOT</version>
    </parent>

    <artifactId>helloworld_woven</artifactId>
    <version>1.0.4-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>helloworld_woven</name>

    <description>Weave HelloWorld class with the automon aspect. This is an example of compile time weaving.
    </description>

    <build>
        <plugins>

            <plugin>

                <groupId>dev.aspectj</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <configuration>
                    <!-- because this project has no sources it is required that forceAjcCompile is true.
                    Alternatively having one dummy class works. -->
                    <forceAjcCompile>true</forceAjcCompile>
                    <!-- The following are the aspect libraries that you would want to weave into your code-->
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>org.automon</groupId>
                            <artifactId>automon</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>

                    <!-- The following is the code you would like to weave by the aspect libraries-->
                    <weaveDependencies>
                        <weaveDependency>
                            <groupId>org.automon</groupId>
                            <artifactId>helloworld_unwoven</artifactId>
                        </weaveDependency>
                    </weaveDependencies>

                </configuration>
            </plugin>
<!--

Calling from command line use mvn or ./mvnw (mvnw is checked into source control)
  mvn exec:java
  mvn exec:java -Dexec.args="20" -Dorg.automon=sysout

In general:
  mvn exec:java -Dexec.args="arg1 arg2" -DmyCustomProperty=someValue

-->
            <plugin>
                <!-- if this doesn't run try to go to the parent directory and run 'mvn clean install' first -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <configuration>
                    <!-- generates class path with all dependencies as well as generated class -->
                    <commandlineArgs>5</commandlineArgs>
                    <classpathScope>compile</classpathScope>
                    <mainClass>com.stevesouza.helloworld.HelloWorld</mainClass>
                    <systemProperties>
                        <property>
                            <!-- note assuming the proper jars are in the classpath you could use jamon, metrics, nullimp, sysout -->
                            <key>org.automon</key>
                            <value>sysout</value>
                        </property>
                    </systemProperties>
                </configuration>
            </plugin>

            <!-- The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <!-- The shade plugin generates an uber jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <excludes>
                                    <!-- Exclude all Spring dependencies -->
                                    <exclude>org.springframework:*</exclude>
                                    <!-- Exclude Hazelcast -->
                                    <exclude>com.hazelcast:*</exclude>
                                    <exclude>io.micrometer:*</exclude>
                                    <exclude>com.jamonapi:*</exclude>
                                    <!-- Exclude Log4j template -->
                                    <exclude>org.apache.logging.log4j:log4j-layout-template-json</exclude>
                                </excludes>
                            </artifactSet>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.stevesouza.helloworld.HelloWorld</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <dependencies>

        <dependency>
            <groupId>org.automon</groupId>
            <artifactId>helloworld_unwoven</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.automon</groupId>
            <artifactId>automon</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <scope>compile</scope>
        </dependency>

    </dependencies>
</project>
